Menus are a simple system that works as a flexable GUI,
All a menu is is a list of buttons, a title, and functions,
These functions are what make these menus usefull,
There are onOpen, onClose, onRender, and onClickUp functions
The general menu layout is this:

name: { the name of the menu
    cutCorners: true, if true all buttons will have their corner cut
    stage: 10, stage of the menu
    size: { size of the menu
        x: 500,
        y: 500
    },
    posistion: { the top left corner of the menu
        x: 100,
        y: 100
    },
    backgroundColor: [0,0,0,.75], the color of the menu background
    border: { an optional border around the menu
        width: .015, the width of the border 0-1
        color: [50,50,50,.75] the color of the border
    },
    title: { an optional object for a title
        text: "Menu text", text to display on the top of the menu
        color: [200,200,200], the color of the text
        size: .2, the max size the text can take up 0-1
        font: "Times" the font for the text
    },
    padding: .05, how much space between buttons 0-1
    buttons: [ an array of all the buttons
    {
        border: { an optional border for the button
            width: .1, how much of the button should be border 0-1
            color: [0,0,0,.75] the color of the button
        },
        color: [0,255,0], the color of the button
        title: { an optional title for the button
            text: "Button text", the text for said title
            color: [0,0,0] and the color of the text
        },
        functions: { all the functions that make it great, self is the button, menu is the menu
            onRender(self, menu) {}, runs before being rendered
            onClickUp(self, menu) {} runs when it is clicked
        }
    },
    ],
    functions: { the functions for the menu
        onRender(self, menu) {}, runs at the start of the render
        onOpen(self, menu) {},runs when Menu.open is called
        onClose(self, menu) {} runs when Menu.ckise is called
    },
    modules: { this is a list of modules to apply to the menu
        "moduleName" : {input}
        "moduleName2" : {input}
        "moduleName3" : {input}
    }
}


Modules are the built like this:

moduleName: {
    onRender(self, menu, inputs) {} //replace onRender for the name of the function you want to run this at
}


The order of things being added to the renderStack and functions:

    menu onOpen()
    menu onOpen modules
    menu onRender()
    menu onRender modules
    r+= menu background
    r+= menu border
    r+= menu title
    button onRender()
    button onRender modules
    r+= button background
    r+= button border
    r+= button text

Here are some useful functions:

this will make the buttons darker looking when the mouse is over them
    self.color = (self.targeted[3] ? .5 : 1)
goes in button onRender

this will make the menu draggable
    let files = self.files

    //set the posistion of the menu
    self.posistion.x = files.targetX - files.offsetX
    self.posistion.y = files.targetY - files.offsetY

    //run on the first loop after mouseDown
    if ((!files.moving) && self.mouseDown) {

        //record the offset of the mouse to the menu
        files.moving = true
        files.offsetX = playerInputs.mousePosistion.x - files.targetX
        files.offsetY = playerInputs.mousePosistion.y - files.targetY
    }

    //move the menu to the mouse
    if (files.moving) {
        files.targetX = playerInputs.mousePosistion.x
        files.targetY = playerInputs.mousePosistion.y
    }

    //run when the mouse button is released
    if (!playerInputs.buttons["mouseLeft"]) {

        //reset everything
        files.moving = false
        files.targetX -= files.offsetX
        files.targetY -= files.offsetY
        files.offsetX = 0
        files.offsetY = 0
    }
    
goes in menu onRender

    //set initial states for moving menu
    if (!self.files) { self.files = {} }
    let files = self.files
    files.moving = false
    files.targetX = canvas.width * .2
    files.targetY = canvas.height * .2
    files.offsetX = 0
    files.offsetY = 0